#include "soundOscillator.h"

#include "mathConstants.h"

#include <cassert>

namespace sound
{
///////////////////////////////////////////////////////////////////////////////
Oscillator::Oscillator()
  : mFrequency(0.0)
  , mAmplitude(0.0)
  , mPhase(0.0)
  , mAccumulatedPhase(0.0)
{
}
///////////////////////////////////////////////////////////////////////////////
Oscillator::Oscillator(double frequency, double amplitude, double phase)
  : mFrequency(frequency)
  , mAmplitude(amplitude)
  , mPhase(phase)
  , mAccumulatedPhase(0.0)
{
    assert(mFrequency >= 0.0);
}
///////////////////////////////////////////////////////////////////////////////
void Oscillator::setFrequency(double frequency)
{
    mFrequency = frequency;
}
///////////////////////////////////////////////////////////////////////////////
void Oscillator::setAmplitude(double amplitude)
{
    mAmplitude = amplitude;
}
///////////////////////////////////////////////////////////////////////////////
void Oscillator::setPhase(double phase)
{
    mPhase = phase;
}
///////////////////////////////////////////////////////////////////////////////
double Oscillator::getFrequency() const
{
    return mFrequency;
}
///////////////////////////////////////////////////////////////////////////////
double Oscillator::getAmplitude() const
{
    return mAmplitude;
}
///////////////////////////////////////////////////////////////////////////////
double Oscillator::getPhase() const
{
    return mPhase;
}
///////////////////////////////////////////////////////////////////////////////
void Oscillator::resetState()
{
    mAccumulatedPhase = 0.0;
}
///////////////////////////////////////////////////////////////////////////////
double Oscillator::getAccumulatedPhase() const
{
    return mAccumulatedPhase;
}
///////////////////////////////////////////////////////////////////////////////
void Oscillator::increaseAccumulatedPhase(double delta_time)
{
    mAccumulatedPhase += 2.0 * math::PI * mFrequency * delta_time;
    if (mAccumulatedPhase > 2.0 * math::PI)
    {
        mAccumulatedPhase -= 2.0 * math::PI;
    }
}
///////////////////////////////////////////////////////////////////////////////
}

